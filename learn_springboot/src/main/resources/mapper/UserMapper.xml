<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.example.rust.mapper.UserMapper">

    <!-- 结果映射 -->
    <resultMap id="UserResultMap" type="org.example.rust.model.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="age" property="age" jdbcType="INTEGER"/>
        <result column="created_at" property="createdAt" jdbcType="TIMESTAMP"/>
        <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 基础字段 -->
    <sql id="Base_Column_List">
        id, name, email, age, created_at, updated_at
    </sql>

    <!-- 插入用户 -->
    <insert id="insert" parameterType="org.example.rust.model.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (name, email, age, created_at, updated_at)
        VALUES (#{name}, #{email}, #{age}, #{createdAt}, #{updatedAt})
    </insert>

    <!-- 根据ID查询用户 -->
    <select id="selectById" parameterType="java.lang.Long" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        WHERE id = #{id}
    </select>

    <!-- 根据邮箱查询用户 -->
    <select id="selectByEmail" parameterType="java.lang.String" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        WHERE email = #{email}
    </select>

    <!-- 更新用户 -->
    <update id="updateById" parameterType="org.example.rust.model.User">
        UPDATE user
        <set>
            <if test="name != null">name = #{name},</if>
            <if test="email != null">email = #{email},</if>
            <if test="age != null">age = #{age},</if>
            updated_at = #{updatedAt}
        </set>
        WHERE id = #{id}
    </update>

    <!-- 删除用户 -->
    <delete id="deleteById" parameterType="java.lang.Long">
        DELETE FROM user WHERE id = #{id}
    </delete>

    <!-- 分页查询用户列表 -->
    <select id="selectPage" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 搜索用户 -->
    <select id="searchUsers" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
        </where>
        ORDER BY created_at DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 统计用户总数 -->
    <select id="countUsers" resultType="java.lang.Long">
        SELECT COUNT(*) FROM user
    </select>

    <!-- 统计搜索结果总数 -->
    <select id="countSearchUsers" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM user
        <where>
            <if test="name != null and name != ''">
                AND name LIKE CONCAT('%', #{name}, '%')
            </if>
            <if test="email != null and email != ''">
                AND email LIKE CONCAT('%', #{email}, '%')
            </if>
        </where>
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="existsByEmail" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0 FROM user WHERE email = #{email}
    </select>

    <!-- 检查邮箱是否被其他用户使用 -->
    <select id="existsByEmailAndNotId" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0 FROM user WHERE email = #{email} AND id != #{id}
    </select>

    <!-- 批量插入用户 -->
    <insert id="batchInsert" parameterType="java.util.List" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (name, email, age, created_at, updated_at)
        VALUES
        <foreach collection="list" item="user" separator=",">
            (#{user.name}, #{user.email}, #{user.age}, #{user.createdAt}, #{user.updatedAt})
        </foreach>
    </insert>

    <!-- 根据ID列表查询用户 -->
    <select id="selectByIds" parameterType="java.util.List" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        WHERE id IN
        <foreach collection="list" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </select>

    <!-- 根据年龄范围查询用户 -->
    <select id="selectByAgeRange" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        WHERE age BETWEEN #{minAge} AND #{maxAge}
        ORDER BY age ASC
    </select>

    <!-- 根据创建时间范围查询用户 -->
    <select id="selectByCreatedTimeRange" resultMap="UserResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user
        WHERE created_at BETWEEN #{startTime} AND #{endTime}
        ORDER BY created_at DESC
    </select>

</mapper>
